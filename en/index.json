[{"content":"反转链表指定部分，稍微思考一下就有了思路，几个临界点需要注意一下。\n一开始使用一个大的循环，在循环中每次判断临界值。\n这样写出来的代码不高效，也不优雅。\n之后看了 LeetCode 讨论区，发现了更好的解决办法。\nPython 中对变量平行赋值时，有个小知识点：\n There\u0026rsquo;s a special rule that if any of the left-hand-side variables \u0026ldquo;overlap\u0026rdquo;, the assignment goes left-to-right.\n 具体可看 这个。\n所以在对几个点进行变换时，必须用一个临时变量把某个变量的值保存起来再赋值。\n使用 Common Lisp 实现代码时，把列表当链表，\n现有的操作符很容易就写出简洁的代码来：\n1 2 3 4 5 6 7 8  (defun reverse-between (head m n) (push 0 head) (let ((end-node (nthcdr n head))) (setf (cdr (nthcdr (1- m) head)) (reverse (subseq head m (1+ n)))) (setf (cdr (last head)) (cdr end-node)) (cdr head)))   同样的思路，只使用 car 和 cdr 实现起来也不难：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  (defun reverse-between (head m n) (let* ((dummy (push 0 head)) (prev dummy) (curr)) (loop repeat (1- m) do (setf prev (cdr prev))) (setf curr (cdr prev)) (loop repeat (- n m -1) with p = prev do (psetf curr (cdr curr) (cdr curr) p p curr) finally (psetf (cdr prev) p (cddr prev) curr)) (cdr dummy)))   这里的 psetf 直接就是平行赋值了。\n","description":"","id":0,"section":"notes","tags":["LeetCode"],"title":"92. Reverse Linked List II","uri":"http://rrcgat.github.io/en/notes/92-reverse-linked-list-ii/"},{"content":"问题并不复杂，要求对指定信息按指定方式解码。\n假设输入是 s，求解函数是 foo，\n则 foo(s) = foo(s[0]) * foo(char[1:]) + foo(s[:2]) * foo(s[2:])。\n递归加动态规划，很容易就写出有 Bug 的代码来。\n一些特殊情况需要考虑完全，\n不然就增加了很多试错的时间。\n一开始写了个递归的版本，修修改改，最后通过了。\n但看了 StefanPochmann 的版本，\n发现并不需要这么麻烦。\n研究了一下他的思路，自己用 Common Lisp 实现了一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  (defun num-decodings (s) (let ((prev \u0026#34;\u0026#34;) (pw 0) (cw (if (string\u0026gt; s \u0026#34;0\u0026#34;) 1 0))) (loop for curr across s do (psetf pw cw prev curr cw (+ (if (char\u0026gt; curr #\\0) cw 0) (if (\u0026lt; 9 (parse-integer (format nil \u0026#34;~a~a\u0026#34; prev curr)) 27) pw 0))) finally (return cw))))   即便使用 psetf 平行赋值，代码行数也比 Python 的实现要多。\n当然，这也跟我对 Common Lisp 并不熟悉有关，\n以后再看看。\n","description":"","id":1,"section":"notes","tags":["LeetCode"],"title":"91. Decode Ways","uri":"http://rrcgat.github.io/en/notes/91-decode-ways/"},{"content":"对技术抱有热情与好奇，还需要努力。\nKeep it simple, stupid.\n","description":"","id":2,"section":"","tags":[""],"title":"About","uri":"http://rrcgat.github.io/en/about/"}]